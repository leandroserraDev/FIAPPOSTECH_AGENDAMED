// <auto-generated />
using System;
using AGENDAMED.Infra.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace AGENDAMED.Infra.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20240816021504_insert_speciality")]
    partial class insert_speciality
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AGENDAMED.Domain.Entities.address.Address", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("ID"));

                    b.Property<string>("CEP")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("DtCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DtModified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UF")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("Address", (string)null);
                });

            modelBuilder.Entity("AGENDAMED.Domain.Entities.appointment.Appointment", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("ID"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("DoctorID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("DtCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DtModified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("PatientID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("SpecialityID")
                        .HasColumnType("bigint");

                    b.HasKey("ID");

                    b.HasIndex("DoctorID");

                    b.HasIndex("PatientID");

                    b.HasIndex("SpecialityID");

                    b.ToTable("Appointment", (string)null);
                });

            modelBuilder.Entity("AGENDAMED.Domain.Entities.speciality.Speciality", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("ID"));

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("DtCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DtModified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("Speciality");

                    b.HasData(
                        new
                        {
                            ID = 1L,
                            Deleted = false,
                            Description = "CLÍNICO GERAL",
                            DtCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DtModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Clínico Geral"
                        },
                        new
                        {
                            ID = 2L,
                            Deleted = false,
                            Description = "ORTOPEDISTA",
                            DtCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DtModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Ortopedista"
                        },
                        new
                        {
                            ID = 3L,
                            Deleted = false,
                            Description = "PEDIATRA",
                            DtCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DtModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Pediatra"
                        });
                });

            modelBuilder.Entity("AGENDAMED.Domain.Entities.user.doctor.Doctor", b =>
                {
                    b.Property<string>("UserID")
                        .HasColumnType("text");

                    b.Property<string>("CRM")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("DtCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DtModified")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("UserID");

                    b.ToTable("Doctor");
                });

            modelBuilder.Entity("AGENDAMED.Domain.Entities.user.doctor.DoctorSpecialities", b =>
                {
                    b.Property<string>("DoctorID")
                        .HasColumnType("text");

                    b.Property<long>("SpecialtyID")
                        .HasColumnType("bigint");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("DtCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DtModified")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("DoctorID", "SpecialtyID");

                    b.HasIndex("SpecialtyID");

                    b.ToTable("DoctorSpecialities", (string)null);
                });

            modelBuilder.Entity("AGENDAMED.Domain.Entities.user.doctor.schedule.Schedule", b =>
                {
                    b.Property<string>("DoctorID")
                        .HasColumnType("text");

                    b.Property<long>("DayOfWeek")
                        .HasColumnType("bigint");

                    b.Property<long>("Speciality")
                        .HasColumnType("bigint");

                    b.HasKey("DoctorID", "DayOfWeek", "Speciality");

                    b.HasIndex("DoctorID", "Speciality");

                    b.ToTable("Schedule", (string)null);
                });

            modelBuilder.Entity("AGENDAMED.Domain.Entities.user.doctor.schedule.ScheduleSpecialityDoctor", b =>
                {
                    b.Property<string>("DoctorID")
                        .HasColumnType("text");

                    b.Property<long>("SpecialityID")
                        .HasColumnType("bigint");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("DtCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DtModified")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("DoctorID", "SpecialityID");

                    b.ToTable("ScheduleSpecialityDoctor", (string)null);
                });

            modelBuilder.Entity("AGENDAMED.Domain.Entities.user.doctor.schedule.ScheduleTime", b =>
                {
                    b.Property<string>("DoctorID")
                        .HasColumnType("text");

                    b.Property<long>("DayOfWeek")
                        .HasColumnType("bigint");

                    b.Property<long>("Speciality")
                        .HasColumnType("bigint");

                    b.Property<TimeSpan>("Time")
                        .HasColumnType("interval");

                    b.HasKey("DoctorID", "DayOfWeek", "Speciality", "Time");

                    b.ToTable("ScheduleHour", (string)null);
                });

            modelBuilder.Entity("AGENDAMED.Domain.Entities.user.patient.Patient", b =>
                {
                    b.Property<string>("UserID")
                        .HasColumnType("text");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("DtCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DtModified")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("UserID");

                    b.ToTable("Patient", (string)null);
                });

            modelBuilder.Entity("AGENDAMED.Domain.Entities.user.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "f1f3e99f-9814-46ad-aead-3b5e4aaad646",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "af8df446-c141-49bd-bc2b-d6dcb3e94429",
                            Email = "administrador@administrador.com",
                            EmailConfirmed = true,
                            LastName = "administrador@administrador.com",
                            LockoutEnabled = false,
                            Name = "administrador@administrador.com",
                            NormalizedEmail = "ADMINISTRADOR@ADMINISTRADOR.COM",
                            NormalizedUserName = "ADMINISTRADOR@ADMINISTRADOR.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAELB3uV+nKROoADNampaDfd/otIm0sGXcg3lY87ztipzRWnf9gnjz++wtlGB2nQDPRg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0c64c1b5-05aa-460e-b273-286c9984533f",
                            TwoFactorEnabled = false,
                            UserName = "administrador@administrador.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "f1f3e99f-9814-46ad-aead-3b5e4aaad646",
                            RoleId = "1"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("AGENDAMED.Domain.Entities.appointment.Appointment", b =>
                {
                    b.HasOne("AGENDAMED.Domain.Entities.user.User", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AGENDAMED.Domain.Entities.user.User", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AGENDAMED.Domain.Entities.speciality.Speciality", "Speciality")
                        .WithMany()
                        .HasForeignKey("SpecialityID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");

                    b.Navigation("Speciality");
                });

            modelBuilder.Entity("AGENDAMED.Domain.Entities.user.doctor.Doctor", b =>
                {
                    b.HasOne("AGENDAMED.Domain.Entities.user.User", "User")
                        .WithOne("Doctor")
                        .HasForeignKey("AGENDAMED.Domain.Entities.user.doctor.Doctor", "UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AGENDAMED.Domain.Entities.user.doctor.DoctorSpecialities", b =>
                {
                    b.HasOne("AGENDAMED.Domain.Entities.user.doctor.Doctor", null)
                        .WithMany("Specialities")
                        .HasForeignKey("DoctorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AGENDAMED.Domain.Entities.speciality.Speciality", "Speciality")
                        .WithMany()
                        .HasForeignKey("SpecialtyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Speciality");
                });

            modelBuilder.Entity("AGENDAMED.Domain.Entities.user.doctor.schedule.Schedule", b =>
                {
                    b.HasOne("AGENDAMED.Domain.Entities.user.doctor.schedule.ScheduleSpecialityDoctor", null)
                        .WithMany("Schedule")
                        .HasForeignKey("DoctorID", "Speciality")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AGENDAMED.Domain.Entities.user.doctor.schedule.ScheduleSpecialityDoctor", b =>
                {
                    b.HasOne("AGENDAMED.Domain.Entities.user.doctor.DoctorSpecialities", null)
                        .WithMany("SchedulesSpecialityDoctor")
                        .HasForeignKey("DoctorID", "SpecialityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AGENDAMED.Domain.Entities.user.doctor.schedule.ScheduleTime", b =>
                {
                    b.HasOne("AGENDAMED.Domain.Entities.user.doctor.schedule.Schedule", null)
                        .WithMany("ScheduleTime")
                        .HasForeignKey("DoctorID", "DayOfWeek", "Speciality")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AGENDAMED.Domain.Entities.user.patient.Patient", b =>
                {
                    b.HasOne("AGENDAMED.Domain.Entities.user.User", null)
                        .WithOne("Patient")
                        .HasForeignKey("AGENDAMED.Domain.Entities.user.patient.Patient", "UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("AGENDAMED.Domain.Entities.user.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("AGENDAMED.Domain.Entities.user.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AGENDAMED.Domain.Entities.user.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("AGENDAMED.Domain.Entities.user.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AGENDAMED.Domain.Entities.user.doctor.Doctor", b =>
                {
                    b.Navigation("Specialities");
                });

            modelBuilder.Entity("AGENDAMED.Domain.Entities.user.doctor.DoctorSpecialities", b =>
                {
                    b.Navigation("SchedulesSpecialityDoctor");
                });

            modelBuilder.Entity("AGENDAMED.Domain.Entities.user.doctor.schedule.Schedule", b =>
                {
                    b.Navigation("ScheduleTime");
                });

            modelBuilder.Entity("AGENDAMED.Domain.Entities.user.doctor.schedule.ScheduleSpecialityDoctor", b =>
                {
                    b.Navigation("Schedule");
                });

            modelBuilder.Entity("AGENDAMED.Domain.Entities.user.User", b =>
                {
                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });
#pragma warning restore 612, 618
        }
    }
}
